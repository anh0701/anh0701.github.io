[
    {
      "title": "How to transfer repositories from GitLab to GitHub",
      "author": "Quynh Anh",
      "time": "Jan 29, 2025",
      "excerpt": "Transferring repositories from GitLab to GitHub can seem... Click to read more.",
      "content": "<p>Transferring repositories from GitLab to GitHub can seem like a daunting task, but with the right steps, it’s actually quite simple. This guide will walk you through the process of moving your projects, preserving all your commit history, branches, and tags, ensuring a smooth transition between the two platforms.</p>\n<img style=\"display: flex; margin: 0 auto;\" src=\"assets/images/Git.svg\" alt=\"Image\" >\n<p>Step 1: create an empty repo on GitHub</p>\n<p>Step 2: repo on Gitlab, run command: </p>\n<pre><code>git remote add github URL-repo-github;</code></pre>\n\n<pre><code>git push --mirror github</code></pre>\n",
      "image": "assets/images/Git.svg",
      "tags": ["Tech", "Git", "GitLab", "GitHub"]
    },
    {
      "title": "How to install Spring boot",
      "author": "Quynh Anh",
      "time": "Jan 29, 2025",
      "excerpt": "How to install Spring boot... Click to read more.",
      "content": "<p></p>\n<img style=\"display: flex; margin: 0 auto;\" src=\"assets/images/spring-boot.png\" alt=\"Image\" >\n<p>Step 1: install scoop</p>\n<pre><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</code></pre>\n<pre><code>Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression</code></pre>\n<p>Step 2: install java </p>\n<pre><code>scoop bucket add java extras main</code></pre>\n\n<pre><code>scoop install java/openjdk21 extras/springboot main/maven main/gradle</code></pre>\n<p>Step 3: install IntelliJ IDEA ultimate</p>\n<pre><code>scoop install extras/idea-ultimate</code></pre>\n",
      "image": "assets/images/spring-boot.png",
      "tags": ["Tech", "Scoop", "Spring boot", "Java"]
    },
    {
      "title": "How to Setup a Laravel Project You Cloned from Github",
      "author": "Quynh Anh",
      "time": "Jan 29, 2025",
      "excerpt": "How to Setup a Laravel Project You Cloned from Github... Click to read more.",
      "content": "<p></p>\n<img style=\"display: flex; margin: 0 auto;\" src=\"assets/images/Laravel.svg\" alt=\"Image\" >\n<p>Step 1: Install <strong>Composer</strong> Dependencies</p>\n<pre><code>composer install</code></pre>\n<p>Step 2: Create a copy of your <strong>.env</strong> file </p>\n<pre><code>cp .env.example .env</code></pre>\n<p>Step 3: Generate an app encryption <strong>key</strong></p>\n<pre><code>php artisan key:generate</code></pre>\n<p>Step 4: In the <strong>.env</strong> file, add database information to allow Laravel to connect to the database\n In the <strong>.env</strong> file fill in the <strong>DB_CONNECTION, DB_HOST, DB_PORT, DB_DATABASE, DB_USERNAME, DB_PASSWORD</strong> options</p>\n<p>Step 5: Migrate the <strong>database</strong></p>\n<pre><code>php artisan migrate</code></pre>\n",
      "image": "assets/images/Laravel.svg",
      "tags": ["Tech", "Git", "Laravel"]
    },
    {
        "title": "Docker Interview Questions",
        "author": "Quynh Anh",
        "time": "Feb 8, 2025",
        "excerpt": "Comprehensive list of Docker interview questions.",
        "content": "<p><strong>1. Kiến thức cơ bản về Docker</strong></p>\n<ul>\n  <li>Docker là gì và nó hoạt động như thế nào?</li>\n  <li>Sự khác biệt giữa Docker Container và Virtual Machine (VM)?</li>\n  <li>Docker Image là gì?</li>\n  <li>Docker Container là gì?</li>\n  <li>Dockerfile là gì và nó có vai trò gì trong Docker?</li>\n  <li>Docker Hub là gì?</li>\n  <li>Docker Daemon và Docker CLI có gì khác nhau?</li>\n</ul>\n<p><strong>2. Câu hỏi về cách sử dụng Docker</strong></p>\n<ul>\n  <li>Bạn làm thế nào để tạo một Docker Image từ Dockerfile?</li>\n  <li>Làm thế nào để chạy một container từ một Docker Image?</li>\n  <li>Làm thế nào để dừng một container đang chạy?</li>\n  <li>Làm thế nào để xóa một container hoặc image trong Docker?</li>\n  <li>Làm thế nào để xây dựng một image từ Dockerfile?</li>\n  <li>Sự khác biệt giữa lệnh docker run và docker exec là gì?</li>\n  <li>Giải thích các tùy chọn thường dùng của lệnh docker run như -d, -p, --name?</li>\n</ul>\n<p><strong>3. Các vấn đề về mạng và lưu trữ</strong></p>\n<ul>\n  <li>Docker Networks là gì? Có những loại mạng nào trong Docker?</li>\n  <li>Giải thích về Docker Volumes và tại sao bạn cần sử dụng chúng thay vì lưu trữ trực tiếp trong container?</li>\n  <li>Docker Bridge network là gì và khi nào sử dụng nó?</li>\n  <li>Docker Compose là gì và khi nào bạn cần sử dụng nó?</li>\n  <li>Làm thế nào để kết nối nhiều containers trong Docker?</li>\n</ul>\n<p><strong>4. Câu hỏi về bảo mật và tối ưu hóa</strong></p>\n<ul>\n  <li>Cách Docker cô lập các container và bảo vệ chúng khỏi các nguy cơ bảo mật?</li>\n  <li>Làm thế nào để giảm kích thước của Docker image?</li>\n  <li>Docker Layer là gì và cách chúng ảnh hưởng đến việc xây dựng image?</li>\n  <li>Làm thế nào để tạo một Dockerfile tối ưu, giúp giảm thiểu thời gian build và kích thước image?</li>\n  <li>Làm thế nào để giới hạn tài nguyên (CPU, RAM) cho container?</li>\n</ul>\n<p><strong>5. Các công cụ và quy trình nâng cao</strong></p>\n<ul>\n  <li>Làm thế nào để tự động hóa quá trình triển khai với Docker?</li>\n  <li>Giải thích về Docker Swarm và Kubernetes. Sự khác biệt giữa Docker Swarm và Kubernetes là gì?</li>\n  <li>Làm thế nào để triển khai một ứng dụng phân tán (multi-container) với Docker Compose?</li>\n  <li>Docker Registry là gì? Làm thế nào để sử dụng Docker Registry riêng thay vì Docker Hub?</li>\n  <li>Làm thế nào để debug một container đang chạy?</li>\n</ul>\n<p><strong>6. Các tình huống thực tế và vấn đề thường gặp</strong></p>\n<ul>\n  <li>Kể về một tình huống bạn đã sử dụng Docker để giải quyết vấn đề trong công việc của bạn.</li>\n  <li>Cách bạn xử lý các vấn đề như container không khởi động, lỗi khi build image hoặc lỗi mạng trong Docker?</li>\n  <li>Làm thế nào để làm việc với các môi trường đa container, ví dụ như một hệ thống web với frontend và backend riêng biệt?</li>\n</ul>\n<p><strong>7. Câu hỏi về quy trình và quản lý</strong></p>\n<ul>\n  <li>Làm thế nào bạn quản lý phiên bản của Docker Image?</li>\n  <li>Làm thế nào bạn xử lý các container khi bạn cần scaling hoặc cập nhật ứng dụng?</li>\n  <li>Khi nào bạn nên sử dụng Docker trong môi trường phát triển, staging, và production?</li>\n</ul>\n<p><strong>8. Câu hỏi về Docker và CI/CD</strong></p>\n<ul>\n  <li>Giải thích cách Docker giúp cải thiện quy trình Continuous Integration (CI) và Continuous Deployment (CD)?</li>\n  <li>Làm thế nào để tích hợp Docker vào pipeline CI/CD của bạn?</li>\n</ul>\n<p><strong>9. Các câu hỏi về troubleshooting và performance</strong></p>\n<ul>\n  <li>Bạn sẽ làm gì nếu container của bạn bị \"lơ lửng\" hoặc không dừng lại khi sử dụng lệnh docker stop?</li>\n  <li>Làm thế nào để giám sát và tối ưu hóa hiệu suất của các container đang chạy?</li>\n</ul>\n<p><strong>10. Câu hỏi về Docker trong môi trường thực tế</strong></p>\n<ul>\n  <li>Khi nào bạn sẽ chọn Docker để triển khai ứng dụng thay vì các công cụ khác như VM, hoặc sử dụng các dịch vụ cloud như AWS Lambda?</li>\n  <li>Docker có thể tương thích với các dịch vụ cloud như AWS, Azure, hoặc Google Cloud không? Giải thích cách Docker tích hợp vào các môi trường này.</li>\n</ul>\n<p><strong>Một số câu hỏi tình huống thực tế có thể hỏi:</strong></p>\n<ul>\n  <li>\"Bạn có một ứng dụng web với frontend và backend. Làm thế nào bạn sử dụng Docker để triển khai ứng dụng này?\"</li>\n  <li>\"Giải thích quy trình tự động hóa deployment ứng dụng sử dụng Docker trong môi trường CI/CD của bạn.\"</li>\n</ul>",
        "image": "assets/images/Docker.svg",
        "tags": ["Tech", "Docker", "DevOps"]
    },
    {
        "title": "Angular Interview Questions",
        "author": "Quynh Anh",
        "time": "Feb 8, 2025",
        "excerpt": "Comprehensive list of Angular interview questions.",
        "content": "<p><strong>Kiến thức cơ bản về Angular</strong></p>\n<ul>\n  <li>Angular là gì và tại sao bạn chọn Angular để phát triển ứng dụng web?</li>\n  <li>Giải thích về các đặc điểm nổi bật của Angular so với các framework khác như React, Vue.</li>\n  <li>Angular sử dụng mô hình kiến trúc nào? Bạn có thể giải thích về mô hình MVC/MVVM trong Angular không?</li>\n  <li>Giải thích về Angular Modules và tại sao chúng lại quan trọng trong ứng dụng Angular?</li>\n  <li>Component trong Angular là gì và cách thức hoạt động của nó như thế nào?</li>\n</ul>\n<p><strong>Các tính năng cơ bản của Angular</strong></p>\n<ul>\n  <li>Angular CLI là gì và làm sao để sử dụng nó?</li>\n  <li>Giải thích về các directives trong Angular và cách sử dụng chúng.</li>\n  <li>Làm sao để sử dụng các data binding trong Angular (Property Binding, Event Binding, Two-Way Binding)?</li>\n  <li>Giải thích về lifecycle hooks trong Angular (ví dụ: ngOnInit, ngOnChanges, ngOnDestroy).</li>\n  <li>Giải thích về dependency injection trong Angular và cách thức hoạt động của nó.</li>\n</ul>\n<p><strong>Xử lý dữ liệu và form</strong></p>\n<ul>\n  <li>Giải thích về Reactive Forms và Template-driven Forms trong Angular, sự khác biệt giữa chúng là gì?</li>\n  <li>Làm sao để xử lý validation trong các form Angular?</li>\n  <li>Giải thích về các service trong Angular và cách sử dụng chúng để chia sẻ dữ liệu giữa các component.</li>\n  <li>Giải thích về Observable và Subject trong Angular. Làm sao để sử dụng chúng để xử lý dữ liệu bất đồng bộ?</li>\n</ul>\n<p><strong>Routing và Navigation</strong></p>\n<ul>\n  <li>Giải thích về Angular Router và cách sử dụng nó để điều hướng giữa các trang trong ứng dụng Angular.</li>\n  <li>Làm sao để bảo vệ các route trong Angular bằng cách sử dụng Guards?</li>\n  <li>Giải thích về Lazy Loading trong Angular và tại sao nó lại quan trọng?</li>\n</ul>\n<p><strong>Quản lý trạng thái</strong></p>\n<ul>\n  <li>Angular có hỗ trợ quản lý trạng thái không? Bạn đã bao giờ sử dụng các thư viện như NgRx chưa? Hãy giải thích về cách hoạt động của chúng.</li>\n  <li>Giải thích về việc sử dụng Services và Store trong Angular để quản lý trạng thái ứng dụng.</li>\n</ul>\n<p><strong>HTTP và API</strong></p>\n<ul>\n  <li>Làm sao để gọi một RESTful API trong Angular? Bạn sẽ sử dụng gì để thực hiện các request HTTP?</li>\n  <li>Giải thích về HttpClientModule trong Angular và cách sử dụng nó để xử lý dữ liệu từ backend.</li>\n  <li>Giải thích về Interceptors trong Angular và cách chúng có thể giúp trong việc xử lý request và response của HTTP.</li>\n</ul>\n<p><strong>Performance và tối ưu hóa</strong></p>\n<ul>\n  <li>Làm sao để tối ưu hóa hiệu suất của ứng dụng Angular?</li>\n  <li>Giải thích về Change Detection trong Angular và cách giảm thiểu sự ảnh hưởng của nó đến hiệu suất ứng dụng.</li>\n  <li>Làm sao để sử dụng trackBy trong Angular để tối ưu hóa việc render danh sách trong ngFor?</li>\n</ul>\n<p><strong>Testing</strong></p>\n<ul>\n  <li>Giải thích về cách viết unit test cho một component trong Angular.</li>\n  <li>Làm sao để viết test cho các service trong Angular?</li>\n  <li>Bạn đã bao giờ sử dụng các công cụ như Jasmine, Karma để test ứng dụng Angular chưa? Giải thích cách sử dụng chúng.</li>\n</ul>\n<p><strong>Các công nghệ liên quan</strong></p>\n<ul>\n  <li>Giải thích về Webpack và cách nó được sử dụng trong Angular.</li>\n  <li>Angular có thể sử dụng với các công nghệ khác như Firebase, NgRx, hay Server-side rendering (SSR) không? Bạn đã làm việc với những công nghệ này chưa?</li>\n  <li>Giải thích về Progressive Web Apps (PWA) và cách tích hợp chúng trong một ứng dụng Angular.</li>\n</ul>\n<p><strong>Các câu hỏi nâng cao</strong></p>\n<ul>\n  <li>Giải thích về Angular Universal và cách sử dụng nó để tạo ứng dụng có khả năng rendering phía server (SSR).</li>\n  <li>Làm sao để triển khai một ứng dụng Angular vào môi trường production?</li>\n  <li>Giải thích về Module Federation trong Angular và cách nó có thể giúp phát triển các ứng dụng micro-frontend.</li>\n</ul>",
        "image": "assets/images/Angular.svg",
        "tags": ["Tech", "Angular", "Frontend"]
    },
    {
        "title": "Next.js Interview Questions",
        "author": "Quynh Anh",
        "time": "Feb 8, 2025",
        "excerpt": "Comprehensive list of Next.js interview questions.",
        "content": "<p><strong>Kiến thức cơ bản về Next.js</strong></p>\n<ul>\n  <li>Next.js là gì và tại sao bạn chọn Next.js thay vì các framework khác như React hoặc Vue?</li>\n  <li>Giải thích về server-side rendering (SSR) và static site generation (SSG) trong Next.js. Sự khác biệt giữa chúng là gì?</li>\n  <li>Làm sao để tạo một trang trong Next.js? Giải thích về cấu trúc thư mục trong Next.js.</li>\n  <li>Giải thích về tính năng file-based routing trong Next.js.</li>\n  <li>Next.js có hỗ trợ dynamic routing không? Làm sao để tạo dynamic routes trong Next.js?</li>\n</ul>\n<p><strong>Các tính năng nổi bật của Next.js</strong></p>\n<ul>\n  <li>Giải thích về getServerSideProps và khi nào bạn nên sử dụng nó?</li>\n  <li>Giải thích về getStaticProps và khi nào bạn nên sử dụng nó?</li>\n  <li>Giải thích về getStaticPaths trong Next.js và khi nào bạn sử dụng nó.</li>\n  <li>Làm sao để Next.js hỗ trợ các trang không cần render phía server?</li>\n  <li>Giải thích về API routes trong Next.js và cách chúng hoạt động.</li>\n</ul>\n<p><strong>Quản lý trạng thái và dữ liệu</strong></p>\n<ul>\n  <li>Làm sao để truyền dữ liệu giữa các trang trong Next.js?</li>\n  <li>Next.js có tích hợp sẵn với các thư viện như Redux hoặc Context API không? Bạn sẽ chọn sử dụng thư viện nào cho việc quản lý trạng thái trong một dự án Next.js?</li>\n  <li>Giải thích về việc sử dụng useEffect và useState trong các trang Next.js để xử lý dữ liệu client-side.</li>\n</ul>\n<p><strong>Tối ưu hóa và performance</strong></p>\n<ul>\n  <li>Giải thích về Image Optimization trong Next.js. Làm sao Next.js tối ưu hóa hình ảnh tự động?</li>\n  <li>Giải thích về Automatic Static Optimization trong Next.js và làm sao để biết liệu một trang có thể sử dụng tính năng này không?</li>\n  <li>Làm sao để cải thiện performance của một ứng dụng Next.js?</li>\n  <li>Giải thích về Incremental Static Regeneration (ISR) trong Next.js và khi nào bạn nên sử dụng nó?</li>\n  <li>Giải thích về Prefetching và Preloading trong Next.js và tác dụng của chúng đối với performance.</li>\n</ul>\n<p><strong>Routing và Navigation</strong></p>\n<ul>\n  <li>Giải thích về Link component trong Next.js và cách sử dụng nó để điều hướng giữa các trang.</li>\n  <li>Làm sao để tạo một route có parameters trong Next.js?</li>\n  <li>Làm sao để xử lý các lỗi 404 và 500 trong Next.js?</li>\n</ul>\n<p><strong>Bảo mật và tối ưu hóa SEO</strong></p>\n<ul>\n  <li>Giải thích về cách Next.js cải thiện SEO so với một ứng dụng React truyền thống.</li>\n  <li>Next.js có hỗ trợ SSR và SEO như thế nào?</li>\n  <li>Giải thích về cách cấu hình metadata (title, description, etc.) cho các trang trong Next.js để tối ưu hóa SEO.</li>\n</ul>\n<p><strong>Các tính năng nâng cao</strong></p>\n<ul>\n  <li>Giải thích về Next.js và các công nghệ Serverless. Làm sao Next.js có thể được triển khai trên các nền tảng serverless như Vercel, AWS Lambda?</li>\n  <li>Giải thích về next/head và cách sử dụng nó để thêm các thẻ meta và title vào mỗi trang.</li>\n  <li>Giải thích về Custom Document và Custom App trong Next.js và khi nào bạn cần sử dụng chúng.</li>\n  <li>Giải thích về Next.js middleware và cách sử dụng chúng để xử lý các yêu cầu HTTP.</li>\n  <li>Làm sao để triển khai một ứng dụng Next.js lên Vercel?</li>\n  <li>Làm sao để triển khai một ứng dụng Next.js với static hosting (ví dụ: Netlify, GitHub Pages)?</li>\n</ul>\n<p><strong>Các câu hỏi liên quan đến các công nghệ khác</strong></p>\n<ul>\n  <li>Giải thích về việc tích hợp Next.js với các API backend (ví dụ: RESTful API hoặc GraphQL).</li>\n  <li>Bạn có thể giải thích cách sử dụng Next.js với TypeScript không?</li>\n  <li>Giải thích về việc sử dụng Next.js với các CMS headless như Strapi, Contentful hoặc Sanity.</li>\n  <li>Giải thích về việc sử dụng các công cụ như Redux Toolkit, Apollo Client hoặc SWR trong ứng dụng Next.js.</li>\n</ul>\n<p><strong>Các câu hỏi liên quan đến quy trình phát triển và DevOps</strong></p>\n<ul>\n  <li>Làm sao để xử lý lỗi và logging trong ứng dụng Next.js khi triển khai vào production?</li>\n  <li>Giải thích về CI/CD và làm sao để thiết lập quy trình CI/CD cho ứng dụng Next.js.</li>\n  <li>Next.js có hỗ trợ code splitting không? Làm sao để sử dụng code splitting trong ứng dụng Next.js?</li>\n</ul>\n<p><strong>Các câu hỏi về hiệu suất và tối ưu hóa</strong></p>\n<ul>\n  <li>Giải thích về cách tối ưu hóa ứng dụng Next.js cho mobile và các thiết bị có băng thông thấp.</li>\n  <li>Làm sao để giảm thời gian tải trang của một ứng dụng Next.js?</li>\n  <li>Làm sao để tối ưu hóa bundle size trong Next.js?</li>\n</ul>\n<p><strong>Kiến thức thực tế</strong></p>\n<ul>\n  <li>Kể về một dự án thực tế mà bạn đã sử dụng Next.js. Bạn gặp những thử thách gì và làm thế nào để giải quyết chúng?</li>\n  <li>Có khi nào bạn gặp phải vấn đề với SSR hoặc SSG trong Next.js không? Làm sao bạn đã giải quyết vấn đề đó?</li>\n</ul>",
        "image": "assets/images/nextjs.png",
        "tags": ["Tech", "Next.js", "Frontend"]
    },
    {
        "title": "NestJS Interview Questions",
        "author": "Quynh Anh",
        "time": "Feb 8, 2025",
        "excerpt": "Comprehensive list of NestJS interview questions.",
        "content": "<p><strong>Kiến thức cơ bản về NestJS</strong></p>\n<ul>\n  <li>NestJS là gì và tại sao bạn chọn sử dụng NestJS thay vì Express hoặc các framework khác?</li>\n  <li>NestJS sử dụng mô hình kiến trúc nào? Giải thích về cách thức hoạt động của mô hình đó.</li>\n  <li>Giải thích về các module trong NestJS và tại sao chúng lại quan trọng trong ứng dụng NestJS.</li>\n  <li>Làm sao để tạo một controller trong NestJS?</li>\n  <li>Giải thích về dependency injection trong NestJS và cách sử dụng nó.</li>\n</ul>\n<p><strong>Các tính năng cơ bản của NestJS</strong></p>\n<ul>\n  <li>NestJS sử dụng TypeScript như thế nào và tại sao lại sử dụng TypeScript thay vì JavaScript?</li>\n  <li>Giải thích về decorators trong NestJS, như @Controller, @Injectable, @Get, @Post, v.v.</li>\n  <li>Giải thích về lifecycle hooks trong NestJS, ví dụ như onModuleInit, onModuleDestroy.</li>\n  <li>Làm sao để xử lý các request và response trong NestJS?</li>\n  <li>Giải thích về @Body(), @Param(), @Query() trong NestJS và cách sử dụng chúng để lấy dữ liệu từ request.</li>\n</ul>\n<p><strong>Quản lý và xử lý dữ liệu</strong></p>\n<ul>\n  <li>Giải thích về cách thức sử dụng validation trong NestJS. Bạn có thể sử dụng class-validator hoặc class-transformer như thế nào?</li>\n  <li>Làm sao để tạo một service trong NestJS? Và làm sao để inject service này vào các controller hoặc các module khác?</li>\n  <li>Làm sao để xử lý các lỗi (exception handling) trong NestJS?</li>\n  <li>NestJS hỗ trợ ORM nào để làm việc với cơ sở dữ liệu? Bạn đã sử dụng TypeORM, Sequelize, hay Mongoose chưa? Giải thích về cách tích hợp chúng vào một ứng dụng NestJS.</li>\n</ul>\n<p><strong>Routing và Middleware</strong></p>\n<ul>\n  <li>Giải thích về routing trong NestJS và cách cấu hình các route cho controller?</li>\n  <li>Làm sao để sử dụng middleware trong NestJS? Bạn có thể giải thích về middleware function trong NestJS không?</li>\n  <li>Giải thích về guard trong NestJS và khi nào bạn sử dụng chúng?</li>\n  <li>Giải thích về interceptor trong NestJS và ứng dụng của chúng trong việc xử lý response, logging, v.v.</li>\n</ul>\n<p><strong>Bảo mật và tối ưu hóa</strong></p>\n<ul>\n  <li>Làm sao để bảo vệ API trong NestJS với các chiến lược bảo mật như JWT (JSON Web Token) hoặc OAuth2?</li>\n  <li>Giải thích về cách sử dụng Passport trong NestJS để xử lý authentication và authorization.</li>\n  <li>Giải thích về CSRF, CORS trong NestJS và làm sao để cấu hình chúng để bảo vệ ứng dụng.</li>\n</ul>\n<p><strong>Các công nghệ và tính năng nâng cao</strong></p>\n<ul>\n  <li>Giải thích về microservices trong NestJS. Làm sao để triển khai một ứng dụng NestJS sử dụng microservices?</li>\n  <li>Giải thích về GraphQL và làm sao để sử dụng GraphQL trong ứng dụng NestJS?</li>\n  <li>Giải thích về WebSocket trong NestJS và cách tạo một WebSocket server để truyền tải dữ liệu theo thời gian thực.</li>\n  <li>Giải thích về việc sử dụng Redis hoặc một caching layer trong NestJS để tối ưu hóa performance.</li>\n  <li>Giải thích về việc sử dụng background jobs hoặc task scheduling trong NestJS. Bạn đã bao giờ sử dụng libraries như Bull hay Agenda?</li>\n  <li>Làm sao để implement logging trong ứng dụng NestJS và các công cụ hỗ trợ logging như Winston hoặc Pino?</li>\n</ul>\n<p><strong>Testing và CI/CD</strong></p>\n<ul>\n  <li>Giải thích về cách viết unit test trong NestJS. Bạn có thể sử dụng Jest như thế nào để test các service và controller trong NestJS?</li>\n  <li>Giải thích về integration testing trong NestJS và làm sao để test một API endpoint?</li>\n  <li>Bạn đã bao giờ sử dụng các công cụ như Docker và Kubernetes để triển khai ứng dụng NestJS chưa? Làm sao để sử dụng chúng trong quá trình phát triển và triển khai?</li>\n</ul>\n<p><strong>Các câu hỏi thực tế và kỹ năng</strong></p>\n<ul>\n  <li>Kể về một dự án mà bạn đã sử dụng NestJS. Bạn gặp những thách thức gì và làm thế nào để giải quyết chúng?</li>\n  <li>Làm sao để xử lý tình huống khi có quá nhiều request đến từ client (rate limiting)?</li>\n  <li>Làm sao để tối ưu hóa hiệu suất của một ứng dụng NestJS, đặc biệt là khi xử lý một lượng lớn dữ liệu hoặc request?</li>\n  <li>NestJS hỗ trợ asynchronous processing như thế nào? Bạn có thể giải thích về async/await trong NestJS?</li>\n  <li>Làm sao để triển khai một ứng dụng NestJS lên môi trường production? Bạn có sử dụng CI/CD như thế nào trong quy trình triển khai?</li>\n</ul>\n<p><strong>Các câu hỏi về môi trường và công cụ phát triển</strong></p>\n<ul>\n  <li>Bạn đã sử dụng các công cụ như Docker hoặc Kubernetes để containerize ứng dụng NestJS chưa? Nếu có, bạn có thể giải thích quá trình này?</li>\n  <li>Giải thích về việc sử dụng environment variables trong NestJS và cách cấu hình chúng cho các môi trường khác nhau (development, staging, production).</li>\n  <li>Làm sao để cấu hình và sử dụng các công cụ như Swagger để tự động tạo documentation cho API trong NestJS?</li>\n  <li>Giải thích về việc sử dụng module federation trong NestJS và các ứng dụng microservices.</li>\n</ul>",
        "image": "assets/images/NestJS.png",
        "tags": ["Tech", "NestJS", "Backend"]
    },
    {
        "title": "Laravel Interview Questions",
        "author": "Quynh Anh",
        "time": "Feb 8, 2025",
        "excerpt": "Comprehensive list of Laravel interview questions.",
        "content": "<p><strong>Kiến thức cơ bản về Laravel</strong></p>\n<ul>\n  <li>Laravel là gì và tại sao bạn lại chọn sử dụng Laravel cho phát triển ứng dụng PHP?</li>\n  <li>Giải thích về kiến trúc MVC trong Laravel và vai trò của Model, View, Controller.</li>\n  <li>Laravel sử dụng Composer như thế nào? Composer có vai trò gì trong quá trình phát triển ứng dụng Laravel?</li>\n  <li>Giải thích về Routing trong Laravel. Làm sao để định tuyến các route trong ứng dụng Laravel?</li>\n  <li>Giải thích về middleware trong Laravel và cách sử dụng middleware để kiểm tra quyền truy cập người dùng.</li>\n</ul>\n<p><strong>Các tính năng cơ bản của Laravel</strong></p>\n<ul>\n  <li>Giải thích về các loại validation trong Laravel. Làm sao để thực hiện validation trong controller hoặc form request?</li>\n  <li>Laravel cung cấp các phương thức nào để xử lý database migrations và seeding? Bạn có thể giải thích cách sử dụng chúng không?</li>\n  <li>Giải thích về Eloquent ORM và các mối quan hệ trong Laravel (1:1, 1:n, n:m).</li>\n  <li>Làm sao để thực hiện các truy vấn cơ bản (CRUD) với Eloquent trong Laravel?</li>\n  <li>Giải thích về Query Builder trong Laravel và khi nào bạn nên sử dụng nó thay vì Eloquent.</li>\n</ul>\n<p><strong>Quản lý và xử lý dữ liệu</strong></p>\n<ul>\n  <li>Laravel hỗ trợ các loại database nào? Bạn có thể giải thích cách cấu hình kết nối cơ sở dữ liệu trong Laravel không?</li>\n  <li>Giải thích về cơ chế pagination trong Laravel và cách sử dụng nó để phân trang dữ liệu.</li>\n  <li>Giải thích về các phương thức Eloquent như find(), pluck(), first(), get() và sự khác biệt giữa chúng.</li>\n  <li>Giải thích về các loại events và listeners trong Laravel và khi nào bạn sẽ sử dụng chúng?</li>\n  <li>Làm sao để xử lý upload file trong Laravel? Bạn có thể giải thích cách sử dụng Laravel Storage để lưu trữ file không?</li>\n</ul>\n<p><strong>Quản lý và bảo mật</strong></p>\n<ul>\n  <li>Laravel hỗ trợ bảo mật như thế nào? Giải thích về các tính năng bảo mật của Laravel như CSRF, bảo vệ XSS và SQL Injection.</li>\n  <li>Giải thích về Laravel Passport và Laravel Sanctum trong việc xử lý API Authentication.</li>\n  <li>Làm sao để bảo vệ các route trong Laravel bằng cách sử dụng authentication và authorization?</li>\n  <li>Giải thích về các phương thức hash và encrypt trong Laravel để bảo vệ thông tin người dùng.</li>\n  <li>Giải thích về session và cookie trong Laravel và cách thức chúng hoạt động trong việc quản lý trạng thái người dùng.</li>\n</ul>\n<p><strong>Các tính năng nâng cao</strong></p>\n<ul>\n  <li>Giải thích về Laravel Queues và khi nào bạn cần sử dụng chúng.</li>\n  <li>Laravel có hỗ trợ scheduling các tác vụ định kỳ không? Làm sao để sử dụng Laravel Scheduler để thực thi các tác vụ tự động?</li>\n  <li>Giải thích về Laravel Broadcasting và Websockets. Bạn có thể sử dụng chúng để xây dựng tính năng real-time như thế nào?</li>\n  <li>Giải thích về việc sử dụng Laravel Mix để biên dịch tài nguyên (CSS, JS) và tối ưu hóa chúng cho production.</li>\n  <li>Laravel hỗ trợ các API như thế nào? Làm sao để xây dựng một RESTful API với Laravel?</li>\n</ul>\n<p><strong>Testing và Debugging</strong></p>\n<ul>\n  <li>Giải thích về các loại test trong Laravel: unit test, feature test. Làm sao để viết test cho controller, model, và service trong Laravel?</li>\n  <li>Laravel sử dụng PHPUnit để viết test. Bạn có thể giải thích cách cấu hình và viết unit test cho ứng dụng Laravel không?</li>\n  <li>Giải thích về Laravel Telescope và khi nào bạn sử dụng nó để debug ứng dụng.</li>\n  <li>Giải thích về việc sử dụng dd() và dump() trong Laravel để debug dữ liệu.</li>\n</ul>\n<p><strong>Quản lý các công cụ và quy trình phát triển</strong></p>\n<ul>\n  <li>Laravel sử dụng Artisan CLI như thế nào? Bạn có thể liệt kê một số lệnh Artisan hữu ích khi phát triển ứng dụng Laravel?</li>\n  <li>Giải thích về việc sử dụng Docker để containerize một ứng dụng Laravel và triển khai nó trong môi trường production.</li>\n  <li>Giải thích về việc sử dụng môi trường (environment variables) trong Laravel và cách cấu hình chúng cho các môi trường như local, staging, production.</li>\n  <li>Giải thích về Laravel Envoyer và các công cụ triển khai khác như Forge trong việc quản lý và triển khai ứng dụng Laravel.</li>\n</ul>\n<p><strong>Các câu hỏi thực tế</strong></p>\n<ul>\n  <li>Kể về một dự án thực tế bạn đã làm với Laravel. Bạn đã đối mặt với những thách thức gì và làm thế nào để giải quyết chúng?</li>\n  <li>Laravel có hỗ trợ multi-tenancy không? Bạn sẽ triển khai một ứng dụng đa khách hàng như thế nào với Laravel?</li>\n  <li>Giải thích cách sử dụng Laravel với các CMS headless như Strapi hoặc Contentful.</li>\n  <li>Làm sao để tối ưu hóa một ứng dụng Laravel có tốc độ truy vấn chậm khi làm việc với một lượng lớn dữ liệu?</li>\n  <li>Làm sao để thực hiện bảo trì hệ thống trong Laravel và đảm bảo ứng dụng hoạt động ổn định trong suốt quá trình bảo trì?</li>\n</ul>\n<p><strong>Triển khai và môi trường production</strong></p>\n<ul>\n  <li>Làm sao để triển khai ứng dụng Laravel lên một máy chủ production (ví dụ: với Apache, Nginx)?</li>\n  <li>Laravel có hỗ trợ deploy ứng dụng trên cloud như AWS, Heroku không? Bạn sẽ làm gì để đảm bảo ứng dụng chạy mượt mà khi deploy trên cloud?</li>\n  <li>Giải thích về các bước để tối ưu hóa ứng dụng Laravel trước khi triển khai lên môi trường production.</li>\n</ul>",
        "image": "assets/images/Laravel.svg",
        "tags": ["Tech", "Laravel", "Backend"]
    }           
      
]
